<?xml version="1.0"?>
<process-model model-name="cmac_interface" code-language="C" tv-in-db="yes" tv-in-tb="yes">
	<OPNET-info OPNET-release="12.0.A" OPNET-patchlevel="5" OPNET-model-data-version="10.7.A"/>
	<model-attributes>
		<attribute name="Type of Service" type="integer">
			<properties type="integer" auto-assign="yes" symbolic-only="yes">
				<default-value value-symbol="Best Effort (0)"/>
				<symbol-map>
					<symbol name="Best Effort (0)" value="0"/>
					<symbol name="Background (1)" value="1"/>
					<symbol name="Standard (2)" value="2"/>
					<symbol name="Excellent Effort (3)" value="3"/>
					<symbol name="Streaming Multimedia (4)" value="4"/>
					<symbol name="Interactive Multimedia (5)" value="5"/>
					<symbol name="Interactive Voice (6)" value="6"/>
					<symbol name="Reserved (7)" value="7"/>
				</symbol-map>
				<comments>
<![CDATA[
Indicates packet's type of 
service (TOS). SRP MAC uses 
this to determine the 
priority of the packet.
]]>
				</comments>
			</properties>
		</attribute>
		<attribute name="Destination" type="integer">
			<properties type="integer" auto-assign="no" symbolic-only="no">
				<default-value value-symbol="SINK"/>
				<symbol-map>
					<symbol name="SINK" value="1"/>
				</symbol-map>
			</properties>
		</attribute>
	</model-attributes>
	<simulation-attributes>
		<attribute name="Result_Directory" group="execution" type="string">
			<properties type="string" auto-assign="yes" symbolic-only="no">
				<default-value value="/tmp/debug"/>
				<comments>
<![CDATA[
the directory where to save the results
]]>
				</comments>
			</properties>
		</attribute>
	</simulation-attributes>
	<attribute-assignments>
		<assignment attribute-name="Destination" type="integer" status="promoted"/>
		<assignment attribute-name="Type of Service" type="integer" status="promoted"/>
		<assignment attribute-name="begsim intrpt" type="toggle" status="hidden" value="1"/>
		<assignment attribute-name="doc file" type="string" status="hidden"/>
		<assignment attribute-name="endsim intrpt" type="toggle" status="hidden" value="1"/>
		<assignment attribute-name="failure intrpts" type="enumerated" status="hidden"/>
		<assignment attribute-name="intrpt interval" type="toggle double" status="hidden"/>
		<assignment attribute-name="priority" type="integer" status="hidden"/>
		<assignment attribute-name="recovery intrpts" type="enumerated" status="hidden"/>
		<assignment attribute-name="subqueue" type="compound">
			<sub-object>
				<attribute creation-mechanics="EMA" name="count" type="integer" value="1"/>
				<attribute creation-mechanics="EMA" name="list" type="object list">
					<object-list>
						<sub-object/>
					</object-list>
				</attribute>
			</sub-object>
		</assignment>
		<assignment attribute-name="super priority" type="toggle" status="hidden"/>
	</attribute-assignments>
	<interfaces>
		<interface promoted-name="begsim intrpt" type="toggle" inherit-limits="yes" inherit-symbol-only="yes" inherit-comments="yes" inherit-units="yes" inherit-default-value="yes">
			<attribute-names>
<![CDATA[
begsim intrpt
]]>
			</attribute-names>
			<properties type="toggle" auto-assign="no" symbolic-only="no">
				<default-value value="0"/>
			</properties>
		</interface>
	</interfaces>
	<state-variables>
<![CDATA[
/* Object identifier of the surrounding module.	 */
Objid	\my_objid;

/* Object identifier of the surrounding node.	 */
Objid	\my_node_objid;

/* Stream index of the packet stream coming from MAC. */
int	\instrm_from_mac_;

/* Stream index of the packet stream going to MAC. */
int	\outstrm_to_mac_;

/* Element address of the associated MAC. */
int	\mac_address;

/* Interface control information needed to indicate */
/* to the MAC of the destination to which packet    */
/* needs to be sent.                                */
Ici*	\wlan_mac_req_iciptr;

/* The destination for all generated packets */
int	\pk_destination;

/* Control variable to write stats */
int	\my_stat_id;

/* List of ids */
List*	\id_list;

/* debug level */
int	\DEBUG;

/* inter packet time for traffic generation */
double	\inter_pk_time;

/* the address of the sink */
int	\sink_address_intf;

]]>
	</state-variables>
	<header-block>
<![CDATA[
/*
 *  cmac_interface.c
 *  
 *  Created by Fabrice Theoleyre on 29/09/09.
 *  Copyright 2009 CNRS / LIG. All rights reserved.
 *
 */


/***** Include Files. *****/
#include <stdlib.h>

#include <math.h>
#include <errno.h>

#include "cmac_process.h"
#include "cmac_tools.h"
#include "cmac_interface.h"



/***** Transition Macros ******/


#define 	MAC_LAYER_PKT_ARVL		((op_intrpt_type() == OPC_INTRPT_STRM) && (op_intrpt_strm() == STREAM_FROM_MAC))
#define 	APPL_LAYER_PKT_ARVL		((op_intrpt_type() == OPC_INTRPT_STRM) && (op_intrpt_strm() == STREAM_FROM_UP))
#define 	MAC_BROADCAST			-1
#define 	ENDSIM					(op_intrpt_type() == OPC_INTRPT_ENDSIM)








//--------------------------------------
//
//			PROCESSES
//
//--------------------------------------

#define		MAC_PROCESS_NAME		"mac."










//--------------------------------------
//
//				STREAMS
//
//--------------------------------------

#define		STREAM_FROM_MAC				0
#define		STREAM_TO_MAC				0

#define		STREAM_FROM_UP				1
#define		STREAM_TO_UP				1




//--------------------------------------
//
//			GENERAL STATS
//
//--------------------------------------



int		nb_nodes = 0;
int		timestamp = 0;



//--------------------------------------
//
//		STATS ABOUT PACKETS
//
//--------------------------------------

List 	*pk_list = NULL;
int		current_pk_id = 0;







]]>
	</header-block>
	<function-block>
<![CDATA[
static void
wlan_mac_higher_layer_intf_sv_init ()
	{
	int			type_of_service;

	// Initializes all state variables used in this process model
	FIN (wlan_mac_higher_layer_intf_sv_init ());

	// Object identifier for the surrounding module and node
	my_objid = op_id_self ();
	my_node_objid = op_topo_parent (my_objid);

	// Determine the destination to which packet should	
	// be sent,and the prioritization to be provided to	
	// the transmitted packet.							
	op_ima_obj_attr_get (my_objid, "Type of Service", 	  &type_of_service);

	// Some interface control information is needed to
	// indicate to the MAC of the destination to which	
	// a given packet needs to be sent. Create it.		
	wlan_mac_req_iciptr = op_ici_create ("wlan_mac_request");
	op_ici_attr_set (wlan_mac_req_iciptr, "type_of_service", type_of_service);
	op_ici_attr_set (wlan_mac_req_iciptr, "protocol_type",   0x800);

	FOUT;
	}

static void
wlan_mac_higher_layer_register_as_arp (){
	char				proc_model_name [128];
	Prohandle			own_prohandle;

	// Register this process in the model-wide process registry
	FIN (wlan_mac_higher_layer_register_as_arp ());

	// Obtain the process model name and process handle
	op_ima_obj_attr_get (my_objid, "process model", proc_model_name);
	own_prohandle = op_pro_self ();

	FOUT;
	}


//-----------------------------------------------------------
//
//					TOOLS
//
//-----------------------------------------------------------

//return the minimum value
double min(double a, double b){
	FIN(min(double a, double b));
	
	if (a<b)
		FRET(a);
	FRET(b);
}


//converts the mac layer id into a string
char *get_mac_layer_to_str(int id, char *msg, int length){
	FIN(get_mac_layer_to_str(int id, char *msg, int length));
	switch(id){
	
		case CMAC:
			strncpy(msg, "cmac", length);
		break;
		
		case IEEE80211:
			strncpy(msg, "IEEE 80211", length);
		break;
		
		default:
			strncpy(msg, "ERROR", length);
		break;
	}
	FRET(msg);
}


//-----------------------------------------------------------
//
//					DUPLICATA DETECTION
//
//-----------------------------------------------------------


//Deletes the frame_id which became obsolete
void del_timeouted_id(void* tot , int code){
	FIN(del_timeouted_id(void* tot , int code));
	
	//double			older_entry = 0;
	int					i;
	id_timeout_struct	*ptr;
	
	//Walks in the list
	for(i= op_prg_list_size(id_list)-1 ; i>= 0 ; i--){
		ptr = op_prg_list_access(id_list , i);
		
		//Timeouted entry !
		if (ptr->timeout <= op_sim_time()){
			ptr = op_prg_list_remove(id_list , i);
			op_prg_mem_free(ptr);
		}
	}
	
	
	//Next verification
	if (op_prg_list_size(id_list) != 0)
		op_intrpt_schedule_call(op_sim_time() + TIMEOUT_ID , 0 , del_timeouted_id , NULL);
	FOUT;
}


//Is thie frame_id already in the list ?
Boolean is_id_seen(int pk_id){
	FIN(is_id_seen(int pk_id));

	id_timeout_struct	*ptr;
	int					i;
	
	for(i=0 ; i < op_prg_list_size(id_list) ; i++){
		ptr = op_prg_list_access(id_list , i);
		
		if (ptr->id == pk_id)
			FRET(OPC_TRUE);
	}
	
	FRET(OPC_FALSE);
}



//adds the frame_id as already seen
void add_id_seen(int pk_id){
	FIN(add_id_seen(int pk_id));
		
	id_timeout_struct	*ptr;
	
	//the frame id is already in the list
	if (is_id_seen(pk_id))
		FOUT;
	
	//Empty list -> timeouted verificaiton
	if (op_prg_list_size(id_list) == 0)
		op_intrpt_schedule_call(op_sim_time() + 1.0 , 0 , del_timeouted_id , NULL);
	
	//New entry
	ptr = op_prg_mem_alloc(sizeof(id_timeout_struct));
	ptr->id			= pk_id;
	ptr->timeout	= op_sim_time() + TIMEOUT_ID;
	op_prg_list_insert(id_list , ptr , OPC_LISTPOS_TAIL);
		
	FOUT;
}









//-----------------------------------------------------------
//
//							TOOLS
//
//-----------------------------------------------------------


//is this int positive or negative ?
short signe(int value){
	FIN(signe(int value));
	
	if (value < 0)
		FRET(-1);
	if (value > 0)
		FRET(1);
	FRET(0);
}


//returns the euclidyan distance
double get_distance(double x1 , double y1 ,double x2 , double y2){
	FIN(get_distance(double x1 , double y1 ,double x2 , double y2));
	FRET(sqrt (  pow(x1 - x2, 2) + pow(y1 - y2, 2)));
}	


//Is the node in the circle of radius r and center x/y ?
short is_in_circle(int address , double x , double y , double radius){
	FIN(is_in_circle(int address , double x , double y , double radius));
	
	int		x_addr , y_addr;

	y_addr = address /  100;
	x_addr = address - y_addr * 100;

	if (get_distance(x_addr , y_addr, x , y) < radius)
		FRET(OPC_TRUE);
	FRET(OPC_FALSE);
}



//-----------------------------------------------------------
//
//							STATISTICS
//
//-----------------------------------------------------------

//returns the struct pk_info associated to pk_id 
pk_info* get_pk_info_in_list(List* ll, int pk_id){
	FIN(get_pk_info_in_list(List* ll, int pk_id));
	
	pk_info		*elem;
	int			i;
	
	for(i=0; i<op_prg_list_size(ll); i++){
		elem = op_prg_list_access(ll , i);
		if (elem->pk_id == pk_id){
			FRET(elem);
		}
	}
	FRET(NULL);
}



//returns the delivery ratio for the packets between id1 and id2
double compute_delivery_ratio(List* ll, int id1, int id2){
	FIN(compute_delivery_ratio(List* ll, int id1, int id2));
	
	pk_info		*elem;
	int			i;
	int			nb_pk_sent 		= 0;
	int			nb_pk_received 	= 0;
	
	
	//Error
	if (id2 > op_prg_list_size(ll))
		FRET(0);
	
	for(i=0 ; i < op_prg_list_size(ll) ; i++){
		elem = op_prg_list_access(ll , i);
		
		//nb of sent packets
		if ((elem->pk_id <= id2) && (elem->pk_id >= id1))
			nb_pk_sent ++;
		
		//this packet was received
		if ((elem->pk_id <= id2) && (elem->pk_id >= id1) && (elem->time_received > 0))
			nb_pk_received++;
	}
	FRET((double)nb_pk_received / nb_pk_sent);
}


//returns the average delay for the packets between id1 and id2
double compute_delay(List* ll, int id1, int id2){
	FIN(compute_delay(List* ll, int id1, int id2));
	
	pk_info		*elem;
	int			i;
	double		delay 			= 0;
	int			nb_pk_sent 		= 0;
	int			nb_pk_received 	= 0;
	
	
	//Error
	if (id2 > op_prg_list_size(ll))
		FRET(0);
	
	for(i=0 ; i < op_prg_list_size(ll) ; i++){
		elem = op_prg_list_access(ll , i);
		
		//nb of sent packets
		if ((elem->pk_id <= id2) && (elem->pk_id >= id1))
			nb_pk_sent ++;
		
		//this packet was received
		if ((elem->pk_id <= id2) && (elem->pk_id >= id1) && (elem->time_received > 0)){
			nb_pk_received++;
			delay += elem->time_received - elem->time_sent;
		}
	}
	FRET(delay / nb_pk_received);
}



//returns the max delay for the packets between id1 and id2
double compute_max_delay(List* ll, int id1, int id2){
	FIN(compute_max_delay(List* ll, int id1, int id2));
	
	pk_info		*elem;
	int			i;
	double		max_delay 		= 0;
	int			nb_pk_sent 		= 0;
	int			nb_pk_received 	= 0;
	
	
	//Error
	if (id2 > op_prg_list_size(ll))
		FRET(0);
	
	for(i=0 ; i < op_prg_list_size(ll) ; i++){
		elem = op_prg_list_access(ll , i);
		
		//nb of sent packets
		if ((elem->pk_id <= id2) && (elem->pk_id >= id1))
			nb_pk_sent ++;
		
		//this packet was received
		if ((elem->pk_id <= id2) && (elem->pk_id >= id1) && (elem->time_received > 0)){
			nb_pk_received++;
			if (elem->time_received - elem->time_sent > max_delay)
				max_delay = elem->time_received - elem->time_sent;
		}
	}
	FRET(max_delay);
}





//-----------------------------------------------------------
//
//			   STATS MANAGEMENT
//
//-----------------------------------------------------------


//updates the route for this frame
void cmac_interface_add_in_route(int frame_id, int addr){
	FIN(cmac_interface_add_in_route(int frame_id, int addr));
	pk_info		*elem;
	int			i;
	int			*addr_ptr;
	
	
	//Error
	if (frame_id > op_prg_list_size(pk_list))
		op_sim_end("invalid data frame id", "", "", "");
	
	for(i=0 ; i < op_prg_list_size(pk_list) ; i++){
		elem = op_prg_list_access(pk_list , i);
		
		//nb of sent packets
		if (elem->pk_id == frame_id){
			addr_ptr = op_prg_mem_alloc(sizeof(int));
			*addr_ptr = addr;
			op_prg_list_insert(elem->route, addr_ptr, OPC_LISTPOS_TAIL);
			FOUT;
		}
	}

	FOUT;
}


//converts a route into a string
char*route_to_str(List *route, char *msg, short length){
	FIN(route_to_str(List *route, char *msg, short length));
	int		i;
	char	str[20];
	int		*elem;
	
	strcpy(msg, "");
	for(i=0; i<op_prg_list_size(route); i++){
		elem = op_prg_list_access(route, i);
		snprintf(str, 20, "%d ", *elem);
		strncat(msg, str, length);
	}		
	FRET(msg);;
}


//-----------------------------------------------------------
//
//							DEBUG
//
//-----------------------------------------------------------


//Writes a file containing info about the received/generated packets
void debug_write_pk_info(){
	FIN(debug_write_pk_info());

	int			i;
	FILE* 		pfile;
	char		filename[100];
	char		msg[100];
	//Stats
	pk_info		*elem;

	snprintf(filename , 100, "%s/%d_data_pk.txt", get_log_dir(), (int) timestamp);
	pfile = fopen(filename , "w");


	if (pfile == NULL){
		snprintf(msg, 100, "Filename %s creates an error: %s", filename, strerror(errno));
		printf("ERROR: %s, %d (%s)\n", msg, errno, strerror(errno));
		op_sim_end(msg, "" , "" , "");
	}

	fprintf(pfile , "SRC	HOPS	DELAY		PK_ID	SENT	ROUTE\n");
	for(i=0; i <op_prg_list_size(pk_list) ; i++){
		elem = op_prg_list_access(pk_list, i);
		fprintf(pfile , "%d	%d	%f	%d		%f	%s\n" , elem->source , op_prg_list_size(elem->route)-1, elem->time_received - elem->time_sent , elem->pk_id , elem->time_sent, route_to_str(elem->route, msg, 100));
		
	}
	fclose(pfile);
	FOUT;
}








//-----------------------------------------------------------
//
//			   ROUTES MANAGEMENT
//
//-----------------------------------------------------------


//Prints the content of a route (route_length, source, ..., destination)
void print_route(List* route_tmp){
	FIN(print_route(List* route_tmp));
	int		i;
	int		*int_ptr;

	printf("ROUTE : ");
	for(i=0 ; i < op_prg_list_size(route_tmp) ; i++){
		int_ptr = op_prg_list_access(route_tmp, i);
	
		printf(" %d" , *int_ptr);
		}
	printf("\n");
	FOUT;
}









]]>
	</function-block>
	<states initial-state-id="10">
		<state id="10" x="90" y="150">
			<attribute name="name" type="string" value="init"/>
			<attribute name="Enter Execs" type="textlist">
				<value-text>
<![CDATA[
//Addresses
char		str[500];
int			my_address;
//Control
int			i;
//Topology
int			node_id;
int			mac_id;
char 		log_dir_tmp[FILENAME_LOG_MAX];



//to initialize my state variables
wlan_mac_higher_layer_intf_sv_init();


//arp functions (not used anymore)
wlan_mac_higher_layer_register_as_arp();


/* Schedule a self interrupt to wait for lower layer	*/
/* wlan MAC process to initialize and register itself in	*/
/* the model-wide process registry.						*/
op_intrpt_schedule_self (op_sim_time (), 0);




//----------------------------------------------------
//
//					My address
//
//-----------------------------------------------------

op_ima_obj_attr_get(op_topo_parent(op_id_self()) , "name" , str);
my_address = atoi(str);
mac_id = op_topo_assoc (op_id_self(), OPC_TOPO_ASSOC_OUT, OPC_OBJTYPE_PROC, STREAM_TO_MAC);
op_ima_obj_attr_set(mac_id , "Address" , 	my_address);





//--------------------------------------------
//
//					PARAMETERS
//
//--------------------------------------------


op_ima_obj_attr_get(op_id_self(),"Destination" ,&pk_destination);
op_ima_sim_attr_get_int32("debug_level",		&DEBUG);
op_ima_sim_attr_get_int32("sink_address",		&sink_address_intf);
op_ima_sim_attr_get_dbl("interpacket_time", 	&inter_pk_time);
op_ima_sim_attr_get_str("Result_Directory", 	FILENAME_LOG_MAX, log_dir_tmp);
set_log_dir(log_dir_tmp);



//----------------------------------------------------
//
//						STATS
//
//-----------------------------------------------------


if (pk_list == NULL)
	pk_list = op_prg_list_create();

id_list = op_prg_list_create();



//----------------------------------------------------
//
//				  TRAFFIC
//
//-----------------------------------------------------


//Sets the inter-packet time value for all the nodes 
for(i=0 ; i < op_topo_object_count(OPC_OBJTYPE_NDMOB) ; i++){  	
	node_id = op_topo_object(OPC_OBJTYPE_NDMOB , i);
	if (op_ima_obj_attr_exists(node_id , "source.Packet Interarrival Arg1"))
		op_ima_obj_attr_set(node_id , "source.Packet Interarrival Arg1" , 	inter_pk_time);
	
	if (op_ima_obj_attr_exists(node_id , "source.Start Time Packet Generation"))
		op_ima_obj_attr_set(node_id , "source.Start Time Packet Generation" , TIME_START_PK_GENERATION);
}




//----------------------------------------------------
//
//						CONTROL
//
//-----------------------------------------------------

if (nb_nodes == 0)
	timestamp = time(NULL);

my_stat_id = nb_nodes;
nb_nodes++;

]]>
				</value-text>
			</attribute>
			<attribute name="Exit Execs" type="textlist">
				<value-text>
<![CDATA[
/* Schedule a self interrupt to wait for lower layer	*/
/* wlan MAC process to initialize and register itself in*/
/* the model-wide process registry.						*/
op_intrpt_schedule_self (op_sim_time (), 0);

]]>
				</value-text>
			</attribute>
		</state>
		<state id="11" x="330" y="150">
			<attribute name="name" type="string" value="idle"/>
			<attribute name="Enter Execs" type="textlist">
				<value-text>
<![CDATA[

]]>
				</value-text>
			</attribute>
			<attribute name="Exit Execs" type="textlist">
				<value-text>
<![CDATA[
/* The only interrupt expected in this state is a	*/
/* stream interrupt. It can be either from the MAC	*/
/* layer for a packet destined for this node or		*/
/* from the application layer for a packet destined	*/
/* for some other node.								*/
/*

intrpt_type = op_intrpt_type ();

if (intrpt_type == OPC_INTRPT_STRM){
	intrpt_strm = op_intrpt_strm ();
	pkptr = op_pk_get (intrpt_strm);
}

if (intrpt_type == OPC_INTRPT_SELF){
	intrpt_code = op_intrpt_code ();
}


*/
]]>
				</value-text>
			</attribute>
		</state>
		<state id="12" x="450" y="30">
			<attribute name="name" type="string" value="appl layer arrival"/>
			<attribute name="Enter Execs" type="textlist">
				<value-text>
<![CDATA[

pk_info	*info_ptr;
Packet	*pkptr;

pkptr = op_pk_get(op_intrpt_strm());


//the sink does not generate any packet (else it would be for itself)
if (mac_address == sink_address_intf){
	op_pk_destroy(pkptr);
}
else{

	//Sets source and destination (embedded directly in the frame)
	op_pk_fd_set(pkptr, FIELD_PAYLOAD_SOURCE, 	OPC_FIELD_TYPE_INTEGER, mac_address,	16);
	op_pk_fd_set(pkptr, FIELD_PAYLOAD_ID, 		OPC_FIELD_TYPE_INTEGER, current_pk_id, 	16);


	//Stats
	info_ptr = (pk_info*) op_prg_mem_alloc(sizeof(pk_info));
	info_ptr->source		= mac_address;
	info_ptr->pk_id			= current_pk_id++;
	info_ptr->time_sent		= op_sim_time();
	info_ptr->time_received	= -1;
	info_ptr->route			= op_prg_list_create();
	info_ptr->pk_size		= op_pk_total_size_get(pkptr);
	op_prg_list_insert(pk_list, info_ptr, OPC_LISTPOS_TAIL);
	cmac_interface_add_in_route(current_pk_id - 1, mac_address);

	//effective transmission to the layer below
	op_pk_send (pkptr, STREAM_TO_MAC);
}
]]>
				</value-text>
			</attribute>
			<attribute name="status" type="toggle" value="1"/>
		</state>
		<state id="13" x="450" y="270">
			<attribute name="name" type="string" value="mac layer arrival"/>
			<attribute name="Enter Execs" type="textlist">
				<value-text>
<![CDATA[
//Src and destination
int			source;
//Information about the packet to receive/forward
pk_info		*info_ptr;
int			pk_id_tmp;
//tmp vaue
Packet		*pkptr;




pkptr = op_pk_get(op_intrpt_strm());




//-----------------------------------
//			SOURCE / DEST
//-----------------------------------

//fields are directly embedded in the data frame
op_pk_fd_get(pkptr , FIELD_PAYLOAD_SOURCE, 	&source);
op_pk_fd_get(pkptr , FIELD_PAYLOAD_ID, 		&pk_id_tmp);





//-----------------------------------
//				STATS
//-----------------------------------
info_ptr = get_pk_info_in_list(pk_list , pk_id_tmp);
if (info_ptr == NULL)
	op_sim_end("The pk_id is not found in the list of generated packets" , "Do you use one single wlan_mac_intf ?" , "" , "");
else{
	info_ptr->hops ++;	
	info_ptr->time_received = op_sim_time();
}



//-----------------------------------
//		Forward to the upper layer
//-----------------------------------
if (op_strm_connected(OPC_STRM_OUT , STREAM_TO_UP) == OPC_TRUE){
		
	op_pk_send (pkptr, STREAM_TO_UP);
	cmac_interface_add_in_route(current_pk_id - 1, mac_address);
}
	
else 
	op_sim_end("The node receives a data packet for it", "although it is not the sink", "", "");




]]>
				</value-text>
			</attribute>
			<attribute name="status" type="toggle" value="1"/>
		</state>
		<state id="14" x="210" y="150">
			<attribute name="name" type="string" value="wait"/>
			<attribute name="Enter Execs" type="textlist">
				<value-text>
<![CDATA[

]]>
				</value-text>
			</attribute>
			<attribute name="Exit Execs" type="textlist">
				<value-text>
<![CDATA[
//Inter pk time
int		mac_id;

//--------------------------------------------
//
//			MAC ADDRESS + STREAMS
//
//--------------------------------------------

//Address
mac_id = op_topo_assoc (op_id_self(), OPC_TOPO_ASSOC_OUT, OPC_OBJTYPE_PROC, STREAM_TO_MAC);
op_ima_obj_attr_get(mac_id , "Address" , 	&mac_address);




]]>
				</value-text>
			</attribute>
		</state>
		<state id="18" x="570" y="150">
			<attribute name="name" type="string" value="END_SIM"/>
			<attribute name="Enter Execs" type="textlist">
				<value-text>
<![CDATA[
FILE* 		pfile;
char		filename[100];
char		msg[100];
int			i, j;
//Goodput / Dratio
pk_info		*elem;
int			nb_pk_received = 0;
int			nb_bits_received;
int			*tab_pk_rec;
int			*tab_pk_sent;
int			nb_pk_sent = 0;
//delay
double		delay_tmp;
double		delay_avg, delay_cumulated = 0, delay_max = 0, delay_stddev = 0;
double		route_length_cumulated = 0;	
double		jain_dratio = 0;
//Simulation parameters
int			RTS;
int			mac_layer = 0;
int			sink_address, pos_method;
double		X_MAX, Y_MAX;
int			nb_branches, nb_channels;
//degree
List 		**neigh_table_ptr;
Objid		node_id, mac_id;
neigh_struct	*neigh_ptr;
double		av_degree = 0;



if (my_stat_id == 0){
	
	//-------------------------------------------
	//				INITIALIZATION
	//-------------------------------------------

	tab_pk_rec = op_prg_mem_alloc(sizeof(int) * nb_nodes);
	tab_pk_sent = op_prg_mem_alloc(sizeof(int) * nb_nodes);
	for(i=0; i<nb_nodes; i++){
		tab_pk_rec[i] 	= 0;
		tab_pk_sent[i] 	= 0;
	}
	
		
	//-------------------------------------------
	//				PARAMETERS
	//-------------------------------------------
	
	op_ima_sim_attr_get(OPC_IMA_INTEGER , 	"RTS" , 			&RTS);
	op_ima_sim_attr_get(OPC_IMA_INTEGER , 	"mac_layer",		&mac_layer);
	op_ima_sim_attr_get(OPC_IMA_INTEGER , 	"sink_address",		&sink_address);
	op_ima_sim_attr_get(OPC_IMA_DOUBLE , 	"X_MAX",			&X_MAX);
	op_ima_sim_attr_get(OPC_IMA_DOUBLE , 	"Y_MAX",			&Y_MAX);
	op_ima_sim_attr_get(OPC_IMA_INTEGER , 	"Positions_Method",	&pos_method);
	op_ima_sim_attr_get(OPC_IMA_INTEGER , 	"nb_branches",		&nb_branches);
	op_ima_sim_attr_get(OPC_IMA_INTEGER , 	"nb_channels",		&nb_channels);

	
	
	//-------------------------------------------
	//				GRAPHS
	//-------------------------------------------
	
	av_degree = 0;	
	for(i=0; i<op_topo_object_count (OPC_OBJTYPE_NDMOB) ; i++){
		node_id		= op_topo_object(OPC_OBJTYPE_NDMOB, i);
		mac_id		= op_id_from_name(node_id, OPC_OBJTYPE_PROC, "mac"); 
		neigh_table_ptr = op_ima_obj_svar_get(mac_id, "my_neighborhood_table");
		
		for(j=0; j<op_prg_list_size(*neigh_table_ptr); j++){
			neigh_ptr = op_prg_list_access(*neigh_table_ptr, j);
			
			if ((stability_get(neigh_ptr) > STAB_MIN) && (neigh_ptr->bidirect))
				av_degree ++;		
		}
	}
	av_degree /= nb_nodes;
	
	
	
	//-------------------------------------------
	//				PACKETS
	//-------------------------------------------

	for(i=0; i <op_prg_list_size(pk_list) ; i++){
		elem = op_prg_list_access(pk_list, i);
		
		if (elem->time_sent <= op_sim_time() - TIME_GUARD_END_DATA){
			nb_pk_sent ++;
			tab_pk_sent[addr_to_nodeid(elem->source)]++;
	
			//Received !!
			if (elem->time_received > 0){
				nb_pk_received ++;
				tab_pk_rec[addr_to_nodeid(elem->source)]++;
			
				//Delays
				delay_tmp = elem->time_received - elem->time_sent;
				delay_cumulated += delay_tmp;
				if (delay_tmp > delay_max)
					delay_max = delay_tmp;
				
				//route length
				route_length_cumulated += (int)op_prg_list_size(elem->route) - 1;
				
				//volume
				nb_bits_received += elem->pk_size;
			}
		}
	}
	delay_avg = delay_cumulated / nb_pk_received;
	//second walk to compute the standard deviation
	for(i=0; i <op_prg_list_size(pk_list) ; i++){
		elem = op_prg_list_access(pk_list, i);
		
		if ((elem->time_sent <= op_sim_time() -1.0) && (elem->time_received > 0)){
			delay_stddev += pow(delay_avg - (elem->time_received - elem->time_sent), 2);
		}
	}	
	delay_stddev = sqrt(delay_stddev / nb_pk_received);
	
	
	//-------------------------------------------
	//				JAIN INDEX
	//-------------------------------------------
	double 	jain_dratio_numerateur = 0, jain_dratio_denominateur = 0;
	int		nb = 0;
	for(i=0; i<nb_nodes; i++)
		if (tab_pk_sent[i] > 0){
			nb++;
			jain_dratio_numerateur 		+= (double)tab_pk_rec[i] / tab_pk_sent[i];
			jain_dratio_denominateur 	+= pow((double)tab_pk_rec[i] / tab_pk_sent[i], 2);
		}
	jain_dratio = (double)pow(jain_dratio_numerateur, 2) / (nb * jain_dratio_denominateur);
		
	//All info about the packets in a common file
	if (DEBUG)
		debug_write_pk_info();

	
	
	//-------------------------------------------
	//					WRITING
	//-------------------------------------------
	snprintf(filename , 100, "%s/%d_stats-nodes=%d-mac=%d.txt", get_log_dir(), timestamp, nb_nodes, mac_layer);
	pfile = fopen(filename , "w");

	if (pfile == NULL){
		snprintf(msg, 100, "Filename %s creates an error: %s", filename, strerror(errno));
		printf("ERROR: %s, %d (%s)\n", msg, errno, strerror(errno));
		op_sim_end(msg, "" , "" , "");
	}


	fprintf(pfile, " --------------------------------------------------------------\n");
	fprintf(pfile, "|                     SIMULATION PARAMETERS                    |\n");
	fprintf(pfile, " --------------------------------------------------------------\n");

	fprintf(pfile, "-------------------------  GENERAL ----------------------------\n");
	fprintf(pfile, "Number of nodes                      : %d\n", nb_nodes);
	fprintf(pfile, "Mac layer id                         : %d\n", mac_layer);
	fprintf(pfile, "Mac layer name                       : %s\n", get_mac_layer_to_str(mac_layer, msg, 100));
	fprintf(pfile, "Duration                             : %f\n", op_sim_time());
	fprintf(pfile, "RTS                                  : %d\n", RTS);
	fprintf(pfile, "Inter Packet Time                    : %f\n", inter_pk_time);
	fprintf(pfile, "Sink address                         : %d\n", sink_address);
	fprintf(pfile, "Number of branches                   : %d\n", nb_branches);
	fprintf(pfile, "Number of channels                   : %d\n", nb_channels);
	fprintf(pfile, "X_MAX                                : %f\n", X_MAX);
	fprintf(pfile, "Y_MAX                                : %f\n", Y_MAX);
	fprintf(pfile, "Initial Locations                    : %d\n", pos_method);
	fprintf(pfile, "Average degree                       : %f\n", av_degree);
	fprintf(pfile, "\n");
		
	
	//-------------------------------------------
	//				STATS
	//-------------------------------------------
	
	
		
	fprintf(pfile, "-----------------------------------------------------------------\n");
	fprintf(pfile, "|                          TRAFFIC                               |\n");
	fprintf(pfile, " ----------------------------------------------------------------\n");
	fprintf(pfile, "Nb packets sent                      : %d\n", nb_pk_sent);
	fprintf(pfile, "Delivery Ratio                       : %f\n", (double)nb_pk_received / nb_pk_sent);
	fprintf(pfile, "Goodput (in Mbps)                    : %f\n", (double) nb_bits_received / (op_sim_time() - TIME_START_DATA) * 1e-6);
	fprintf(pfile, "Goodput (in pps)                     : %f\n", (double) nb_pk_received / (op_sim_time() - TIME_START_DATA));
	fprintf(pfile, "\n");
		
	fprintf(pfile, "\n\n--------------------  DELAY ---------------------------------\n");
	fprintf(pfile, "Average Delay (in s)                 : %f\n", delay_avg);
	fprintf(pfile, "Max Delay (in s)                     : %f\n", delay_max);
	fprintf(pfile, "Delay Confidence Interval plus (in s): %f\n", delay_avg + 2 * delay_stddev / sqrt(nb_pk_received));
	fprintf(pfile, "Delay Confidence Interval min (in s) : %f\n", delay_avg - 2 * delay_stddev / sqrt(nb_pk_received));
	fprintf(pfile, "Delay Standard Deviation (in s)      : %f\n", delay_stddev);
	fprintf(pfile, "\n");

	fprintf(pfile, "\n\n--------------------  FAIRNESS ---------------------------------\n");
	fprintf(pfile, "Delivery Ratio Jain Index            : %f\n", jain_dratio);
	fprintf(pfile, "\n");

	
	fprintf(pfile, "\n\n--------------------  ROUTE ---------------------------------\n");
	fprintf(pfile, "Average route length                : %f\n", route_length_cumulated / nb_pk_received);
	fprintf(pfile, "\n");

	
	//-------------------------------------------
	//		CLOSE
	//-------------------------------------------
	fclose(pfile);


}

]]>
				</value-text>
			</attribute>
		</state>
	</states>
	<transitions>
		<transition source-state-id="13" destination-state-id="18" label-x="509" label-y="205">
			<path-point x="463" y="261"/>
			<path-point x="556" y="153"/>
			<attribute name="name" type="string" value="tr_31"/>
			<attribute name="condition" type="string" value="ENDSIM"/>
		</transition>
		<transition source-state-id="11" destination-state-id="12" label-x="318" label-y="61">
			<path-point x="320" y="138"/>
			<path-point x="451" y="11"/>
			<attribute name="name" type="string" value="tr_14"/>
			<attribute name="condition" type="string" value="APPL_LAYER_PKT_ARVL &amp;&amp; !ENDSIM"/>
			<attribute name="drawing style" type="toggle" value="0"/>
		</transition>
		<transition source-state-id="11" destination-state-id="13" label-x="322" label-y="254">
			<path-point x="327" y="164"/>
			<path-point x="437" y="281"/>
			<attribute name="name" type="string" value="tr_17"/>
			<attribute name="condition" type="string" value="MAC_LAYER_PKT_ARVL &amp;&amp; !ENDSIM"/>
			<attribute name="drawing style" type="toggle" value="0"/>
		</transition>
		<transition source-state-id="12" destination-state-id="18" label-x="502" label-y="88">
			<path-point x="462" y="34"/>
			<path-point x="551" y="145"/>
			<attribute name="name" type="string" value="tr_32"/>
			<attribute name="condition" type="string" value="ENDSIM"/>
		</transition>
		<transition source-state-id="11" destination-state-id="18" label-x="450" label-y="170">
			<path-point x="343" y="151"/>
			<path-point x="553" y="147"/>
			<attribute name="name" type="string" value="tr_30"/>
			<attribute name="condition" type="string" value="ENDSIM"/>
		</transition>
		<transition source-state-id="12" destination-state-id="11" label-x="425" label-y="103">
			<path-point x="452" y="49"/>
			<path-point x="347" y="155"/>
			<attribute name="name" type="string" value="tr_16"/>
			<attribute name="condition" type="string" value="!ENDSIM"/>
			<attribute name="drawing style" type="toggle" value="0"/>
		</transition>
		<transition source-state-id="13" destination-state-id="11" label-x="422" label-y="210">
			<path-point x="447" y="258"/>
			<path-point x="343" y="147"/>
			<attribute name="name" type="string" value="tr_19"/>
			<attribute name="condition" type="string" value="!ENDSIM"/>
			<attribute name="drawing style" type="toggle" value="0"/>
		</transition>
		<transition source-state-id="14" destination-state-id="11" label-x="280" label-y="148">
			<path-point x="226" y="146"/>
			<path-point x="331" y="150"/>
			<attribute name="name" type="string" value="tr_22"/>
		</transition>
		<transition source-state-id="10" destination-state-id="14" label-x="158" label-y="152">
			<path-point x="101" y="154"/>
			<path-point x="215" y="150"/>
			<attribute name="name" type="string" value="tr_12"/>
		</transition>
	</transitions>
	<external-sources>
<![CDATA[
cmac_tools
]]>
	</external-sources>
	<local-statistics>
		<statistic name="outstat" group="" dimension="100" capture-mode="normal" display-mode="linear" low-bound="0.0" high-bound="disabled"/>
	</local-statistics>
	<comments>
<![CDATA[
General Process Description: 

---------------------------- 

The wlan_mac_higher_layer_intf process model accepts packets from any 
number of sources and discards them regardless of their content or format.

 

ICI Interfaces: 

-------------- 

None 



Packet Formats: 

--------------- 

None 



Statistic Wires: 

---------------- 

None 



Process Registry: 

----------------- 

Not Applicable



Restrictions: 

------------- 

None

]]>
	</comments>
</process-model>
